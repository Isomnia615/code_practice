git add code-accumulation/递归与迭代
git commit-m"dragon power"

//在魔法世界，有一种“斐波那契龙”，它的成长模式非常奇特。
//龙在第0天和第1天时的力量都为1。从第2天开始,它当天的力量等于前两天力量的总和。 
//然而，龙的成长会受到“魔力潮汐”的影响：
//如果天数 n 是一个​素数​，龙会发生共鸣，当天的力量会在求和后​额外增加 n​。
//如果天数 n 是一个​偶数​(且大于2),环境会变得迟钝，当天的力量会在求和后​减少 1​。 
//注意:一个数可能同时是素数和偶数,比如2,此时只应用素数规则）。
//编写递归函数 long long dragon_power(int n)，计算第 n 天龙的力量。
//编写辅助函数 int is_prime(int n)。
//在 main 函数中读取天数 ​n​,输出龙当天对应的力量值。
//n 的输入范围为 0 ≤ n ≤ ​30​。

long long dragon_power(int n)//递归＋记忆化存储
{
	if (n == 0 || n == 1)
	{
		return 1;
	}

	long long prev1 = dragon_power(n - 1);
	long long prev2 = dragon_power(n - 2);
	long long result = prev1 + prev2;
	//实现前两项之和

	if (is_prime(n))
	{
		result += n;
	}
	else if (n % 2 == 0 && n > 2) {
		result -= 1;
	}
	return result;

}

long long dragon_power(int n)   //迭代＋存储暂时值
{
	if (n == 0 || n == 1) {
		return 1;
	}

	long long a = 1, b = 1, c;
	for (int i = 2; i <= n; i++)
	{
		c = a + b;

		if (is_prime(i))
		{
			c += i;
		}
		else if (i % 2 == 0 && i > 2)
		{
			c -= 1;
		}
		a = b;
		b = c;
	}
}


